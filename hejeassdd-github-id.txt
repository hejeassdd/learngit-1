廖老师讲课内容非常清晰易懂，非常感谢！
以下是我做的笔记。
Git笔记
1.sudo全称：super user do，搞笑解释：suck it up ,do as ordered
2.su：Swith user 切换用户，切换到root用户
3.安装完成后，需要自报家门
$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
4.创建版本库repository（或仓库）
$ mkdir learngit
	$ cd learngit
	$ pwd（全名：Print working directory）
5.把创建好的版本库交给git管理
$ git init
6. git add readme.txt
git commit -m ""  只会提交添加到缓存区的文件（只提交添加的）
git commit -a -m ""  能提交修改过，但是没有添加到缓存区的文件（修改过的就能提交）
解析：-a 应该是add的缩写，-m 应该是message的缩写
git status				查看状态
git diff				查看修改信息
git checkout --<file>		抛弃修改
分析： git checkout -- file；撤销对工作区修改；这个命令是以最新的存储时间节点（add和commit）为参照，覆盖工
作区对应文件file；这个命令改变的是工作区
　　	git reset HEAD -- file；清空add命令向暂存区提交的关于file文件的修改（Ustage）；这个命令仅改变暂存区，并不改变工作区，这意味着在无任何其他操作的情况下，工作区中的实际文件同该命令运行之前无任何改变
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，
这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。其实是用版本库里的版本替换工作区的版本
7.	 git log  倒序打印，提交记录信息
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
git reset HEAD <file>		暂存区的修改撤销掉（unstage），重新放回工作区
git reset --hard HEAD^	当我们用HEAD时，表示最新的版本
git reset --hard HEAD~100
git reset --hard 3628164		未关命令窗口，可以找回之前的版本号记录
git reflog
可以用tab做自动补全
工作区和暂存区的概念要理解~
cat readme.txt		查看文件内容
8.	删除文件：
rm <file>		删除工作区文件
	 git rm <file>	删除缓存区 文件
9.	生成SSH命令：ssh-keygen -t rsa -C "youremail@example.com"
这个命令会在本地用户目录生成秘钥、公钥。
第一次上传本地文件到github命令：
git remote add origin git@github.com:账户名/仓库名.git
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
10.	创建分支：git checkout -b dev

git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
然后，用git branch命令查看当前分支：
git branch命令会列出所有分支，当前分支前面会标一个*号
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
11.	查看merge合并分支情况：git log --graph --pretty=oneline --abbrev--commit		
q是退出查看分支状态的退出键。
注意：git 一旦merge，就算出现冲突，解决完冲突，最后也一定会合并的~不然会提示，有未merge的files.
git merge --no-ff -m "merge with no-ff" dev		（全拼：no fast forward）不快进模式
因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
经过亲自测试，得出实验结论：平时直接merge dev，会成线性快进模式；一旦用过一次--no-ff模式，之后就算是再直接merge dev也会提示我们来commit保存，知道删除这个分支。
12.	工作中没写完代码，就要去解决之前的bug，不能提交代码，可以暂存下。
git stash
然后再去要修改bug的分支，创建新的分支，修改完，在merge回去。回来继续写工作中的代码。
用git stash list命令，查看列表
git stash pop，恢复的同时把stash内容也删了
git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
当“储藏区”比较多是，可以指定回复到哪一个
$ git stash apply stash@{0}
13.	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
14.	查看远程库的信息，用git remote
git remote -v显示更详细的信息
推送分支
$ git push origin master		
$ git push origin dev
抓取分支
git clone git@github.com:hejeassdd/learngit.git
从本地dev分支上传到远程仓库：git push --set-upstream origin dev
git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
$ git branch --set-upstream dev origin/dev
15.	标签：
$ git tag v1.0
查看标签：$ git tag
$ git tag v0.9 6224937	查看完日志，可以给之前的commit指针添加标签
可以用git show <tagname>查看标签信息：$ git show v0.9
可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
$ git tag -a v0.1 -m "version 0.1 released" 3628164
删除标签：$ git tag -d v0.1

如果要推送某个标签到远程，使用命令git push origin <tagname>：
$ git push origin v1.0
一次性推送全部尚未推送到远程的本地标签：
$ git push origin --tags
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：$ git tag -d v0.9

然后，从远程删除。删除命令也是push，但是格式如下：$ git push origin :refs/tags/v0.9
